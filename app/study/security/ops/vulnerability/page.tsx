'use client';
import { useState } from 'react';
import Link from 'next/link';

export default function SecurityOpsVulnerabilityPage() {
  const [activeTab, setActiveTab] = useState('overview');

  return (
    <div className="container mx-auto px-4 py-8">
      {/* 顶部返回导航 */}
      <div className="mb-4">
        <Link href="/study/security/ops" className="px-4 py-2 text-blue-600 hover:text-blue-800">← 返回安全运维</Link>
      </div>
      <h1 className="text-3xl font-bold mb-8">漏洞管理</h1>

      {/* 标签页导航 */}
      <div className="flex space-x-4 mb-6 border-b overflow-x-auto">
        <button onClick={() => setActiveTab('overview')} className={`px-4 py-2 font-medium whitespace-nowrap ${activeTab === 'overview' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500 hover:text-gray-700'}`}>概述</button>
        <button onClick={() => setActiveTab('scan')} className={`px-4 py-2 font-medium whitespace-nowrap ${activeTab === 'scan' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500 hover:text-gray-700'}`}>漏洞扫描</button>
        <button onClick={() => setActiveTab('assessment')} className={`px-4 py-2 font-medium whitespace-nowrap ${activeTab === 'assessment' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500 hover:text-gray-700'}`}>漏洞评估</button>
        <button onClick={() => setActiveTab('fix')} className={`px-4 py-2 font-medium whitespace-nowrap ${activeTab === 'fix' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500 hover:text-gray-700'}`}>漏洞修复</button>
        <button onClick={() => setActiveTab('verify')} className={`px-4 py-2 font-medium whitespace-nowrap ${activeTab === 'verify' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500 hover:text-gray-700'}`}>修复验证</button>
        <button onClick={() => setActiveTab('report')} className={`px-4 py-2 font-medium whitespace-nowrap ${activeTab === 'report' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500 hover:text-gray-700'}`}>报告管理</button>
        <button onClick={() => setActiveTab('case')} className={`px-4 py-2 font-medium whitespace-nowrap ${activeTab === 'case' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500 hover:text-gray-700'}`}>实践案例</button>
      </div>

      {/* 内容区域 */}
      <div className="bg-white rounded-lg shadow-md p-6">
        {activeTab === 'overview' && (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold mb-3">漏洞管理概述</h3>
            <div className="prose max-w-none">
              <p>漏洞管理是安全运维的核心工作之一，包括漏洞发现、评估、修复、验证等全生命周期管理。通过规范的漏洞管理流程，可以及时发现和消除安全隐患，降低安全风险。</p>
              <ul className="list-disc pl-6">
                <li>及时发现系统、应用、网络等各类漏洞</li>
                <li>准确评估漏洞风险等级和影响范围</li>
                <li>制定合理的修复方案和优先级</li>
                <li>验证漏洞修复效果</li>
                <li>持续跟踪和优化漏洞管理流程</li>
              </ul>
            </div>
          </div>
        )}
        {activeTab === 'scan' && (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold mb-3">漏洞扫描</h3>
            <div className="prose max-w-none">
              <h4 className="font-semibold text-lg mb-2">常见漏洞扫描工具</h4>
              <ul className="list-disc pl-6">
                <li>Nessus：全面的漏洞扫描工具</li>
                <li>OpenVAS：开源的漏洞扫描系统</li>
                <li>Nmap：网络扫描和漏洞检测</li>
                <li>AWVS：Web应用漏洞扫描</li>
                <li>Burp Suite：Web应用安全测试</li>
              </ul>
              <h4 className="font-semibold text-lg mb-2">Nessus扫描配置示例</h4>
              <pre className="bg-gray-100 p-4 rounded mb-4">
{`# Nessus扫描策略配置
{
  "settings": {
    "name": "Full System Scan",
    "description": "Complete system vulnerability scan",
    "scanner_id": "1",
    "policy_id": "1",
    "targets": "192.168.1.0/24",
    "schedule": {
      "type": "weekly",
      "day": "sunday",
      "time": "02:00"
    },
    "enabled": true
  }
}`}
              </pre>
              <h4 className="font-semibold text-lg mb-2">Nmap漏洞扫描脚本示例</h4>
              <pre className="bg-gray-100 p-4 rounded mb-4">
{`#!/bin/bash
# 批量扫描目标主机漏洞
for ip in $(cat targets.txt); do
  echo "Scanning $ip..."
  nmap -sV -sC --script vuln -oA scan_$ip $ip
done

# 分析扫描结果
for file in scan_*.xml; do
  echo "Analyzing $file..."
  xsltproc $file -o report_$(basename $file .xml).html
done`}
              </pre>
            </div>
          </div>
        )}
        {activeTab === 'assessment' && (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold mb-3">漏洞评估</h3>
            <div className="prose max-w-none">
              <h4 className="font-semibold text-lg mb-2">漏洞评估维度</h4>
              <ul className="list-disc pl-6">
                <li>CVSS评分：通用漏洞评分系统</li>
                <li>影响范围：受影响的系统、应用、数据</li>
                <li>利用难度：攻击者利用漏洞的难易程度</li>
                <li>修复成本：修复漏洞所需的时间和资源</li>
                <li>业务影响：对业务连续性的影响程度</li>
              </ul>
              <h4 className="font-semibold text-lg mb-2">Python漏洞评估脚本示例</h4>
              <pre className="bg-gray-100 p-4 rounded mb-4">
{`import cvss
import json
from datetime import datetime

class VulnerabilityAssessment:
    def __init__(self, vuln_data):
        self.vuln_data = vuln_data
        self.cvss_calculator = cvss.CVSS3()
    
    def calculate_risk_score(self):
        # 计算CVSS评分
        self.cvss_calculator.from_vector(self.vuln_data['cvss_vector'])
        base_score = self.cvss_calculator.base_score
        
        # 计算业务影响分数
        business_impact = self.vuln_data['business_impact']
        
        # 计算最终风险分数
        risk_score = (base_score * 0.7) + (business_impact * 0.3)
        
        return {
            'risk_score': risk_score,
            'severity': self._get_severity(risk_score),
            'assessment_date': datetime.now().isoformat()
        }
    
    def _get_severity(self, score):
        if score >= 9.0: return 'Critical'
        elif score >= 7.0: return 'High'
        elif score >= 4.0: return 'Medium'
        else: return 'Low'

# 使用示例
vuln_data = {
    'cvss_vector': 'CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',
    'business_impact': 8.5
}

assessment = VulnerabilityAssessment(vuln_data)
result = assessment.calculate_risk_score()
print(json.dumps(result, indent=2))`}
              </pre>
            </div>
          </div>
        )}
        {activeTab === 'fix' && (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold mb-3">漏洞修复</h3>
            <div className="prose max-w-none">
              <h4 className="font-semibold text-lg mb-2">漏洞修复流程</h4>
              <ol className="list-decimal pl-6">
                <li>分析漏洞成因和影响</li>
                <li>制定修复方案</li>
                <li>准备修复环境</li>
                <li>执行修复操作</li>
                <li>验证修复效果</li>
                <li>更新文档和记录</li>
              </ol>
              <h4 className="font-semibold text-lg mb-2">自动化修复脚本示例</h4>
              <pre className="bg-gray-100 p-4 rounded mb-4">
{`#!/bin/bash
# 自动化修复常见系统漏洞

# 更新系统补丁
update_system() {
    if [ -f /etc/debian_version ]; then
        apt-get update && apt-get upgrade -y
    elif [ -f /etc/redhat-release ]; then
        yum update -y
    fi
}

# 修复SSH配置
fix_ssh() {
    sed -i 's/#PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config
    sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
    systemctl restart sshd
}

# 修复文件权限
fix_permissions() {
    find /var/www/html -type f -exec chmod 644 {} \\;
    find /var/www/html -type d -exec chmod 755 {} \\;
    chown -R www-data:www-data /var/www/html
}

# 配置防火墙规则
setup_firewall() {
    if command -v ufw &> /dev/null; then
        ufw default deny incoming
        ufw default allow outgoing
        ufw allow ssh
        ufw allow http
        ufw allow https
        ufw enable
    elif command -v firewall-cmd &> /dev/null; then
        firewall-cmd --permanent --add-service=ssh
        firewall-cmd --permanent --add-service=http
        firewall-cmd --permanent --add-service=https
        firewall-cmd --reload
    fi
}

# 主函数
main() {
    echo "开始系统漏洞修复..."
    update_system
    fix_ssh
    fix_permissions
    setup_firewall
    echo "漏洞修复完成"
}

main`}
              </pre>
            </div>
          </div>
        )}
        {activeTab === 'verify' && (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold mb-3">修复验证</h3>
            <div className="prose max-w-none">
              <h4 className="font-semibold text-lg mb-2">验证方法</h4>
              <ul className="list-disc pl-6">
                <li>漏洞扫描复测</li>
                <li>功能测试验证</li>
                <li>渗透测试验证</li>
                <li>代码审计验证</li>
              </ul>
              <h4 className="font-semibold text-lg mb-2">自动化验证脚本示例</h4>
              <pre className="bg-gray-100 p-4 rounded mb-4">
{`import requests
import nmap
import json
from datetime import datetime

class VulnerabilityVerification:
    def __init__(self, target, vuln_id):
        self.target = target
        self.vuln_id = vuln_id
        self.nm = nmap.PortScanner()
    
    def verify_patch(self):
        results = {
            'vuln_id': self.vuln_id,
            'target': self.target,
            'verification_date': datetime.now().isoformat(),
            'status': 'Unknown',
            'details': []
        }
        
        # 执行漏洞扫描
        self.nm.scan(self.target, arguments='-sV --script vuln')
        
        # 检查特定漏洞
        if self.vuln_id in self.nm[self.target].get('script', {}):
            results['status'] = 'Vulnerable'
            results['details'].append('Vulnerability still exists')
        else:
            results['status'] = 'Fixed'
            results['details'].append('Vulnerability not detected')
        
        # 验证服务状态
        try:
            response = requests.get(f'http://{self.target}')
            results['details'].append(f'Service status: {response.status_code}')
        except:
            results['details'].append('Service not accessible')
        
        return results

# 使用示例
verifier = VulnerabilityVerification('192.168.1.100', 'CVE-2021-1234')
result = verifier.verify_patch()
print(json.dumps(result, indent=2))`}
              </pre>
            </div>
          </div>
        )}
        {activeTab === 'report' && (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold mb-3">报告管理</h3>
            <div className="prose max-w-none">
              <h4 className="font-semibold text-lg mb-2">报告内容要素</h4>
              <ul className="list-disc pl-6">
                <li>漏洞基本信息（ID、名称、描述）</li>
                <li>风险等级和影响范围</li>
                <li>修复建议和方案</li>
                <li>修复状态和验证结果</li>
                <li>时间节点和责任人</li>
              </ul>
              <h4 className="font-semibold text-lg mb-2">报告生成脚本示例</h4>
              <pre className="bg-gray-100 p-4 rounded mb-4">
{`from jinja2 import Template
import json
from datetime import datetime

class VulnerabilityReport:
    def __init__(self, vuln_data):
        self.vuln_data = vuln_data
        self.template = '''
        # 漏洞修复报告
        
        ## 基本信息
        - 漏洞ID: {{ vuln.id }}
        - 漏洞名称: {{ vuln.name }}
        - 发现时间: {{ vuln.discovery_date }}
        - 修复时间: {{ vuln.fix_date }}
        
        ## 漏洞详情
        - 风险等级: {{ vuln.severity }}
        - 影响范围: {{ vuln.scope }}
        - 漏洞描述: {{ vuln.description }}
        
        ## 修复方案
        {{ vuln.solution }}
        
        ## 验证结果
        - 验证时间: {{ vuln.verification_date }}
        - 验证方法: {{ vuln.verification_method }}
        - 验证结果: {{ vuln.verification_result }}
        
        ## 责任人
        - 发现人: {{ vuln.discoverer }}
        - 修复人: {{ vuln.fixer }}
        - 验证人: {{ vuln.verifier }}
        '''
    
    def generate_report(self):
        template = Template(self.template)
        report = template.render(vuln=self.vuln_data)
        
        # 保存报告
        filename = f'vuln_report_{self.vuln_data["id"]}_{datetime.now().strftime("%Y%m%d")}.md'
        with open(filename, 'w') as f:
            f.write(report)
        
        return filename

# 使用示例
vuln_data = {
    'id': 'CVE-2021-1234',
    'name': 'SQL注入漏洞',
    'discovery_date': '2024-01-01',
    'fix_date': '2024-01-05',
    'severity': 'High',
    'scope': 'Web应用',
    'description': '在用户输入处存在SQL注入漏洞',
    'solution': '使用参数化查询',
    'verification_date': '2024-01-06',
    'verification_method': '渗透测试',
    'verification_result': '已修复',
    'discoverer': '张三',
    'fixer': '李四',
    'verifier': '王五'
}

report = VulnerabilityReport(vuln_data)
report_file = report.generate_report()
print(f'报告已生成: {report_file}')`}
              </pre>
            </div>
          </div>
        )}
        {activeTab === 'case' && (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold mb-3">实践案例</h3>
            <div className="prose max-w-none">
              <h4 className="font-semibold text-lg mb-2">案例：企业漏洞管理体系建设</h4>
              <ol className="list-decimal pl-6">
                <li>建立漏洞管理制度和流程</li>
                <li>部署自动化漏洞扫描系统</li>
                <li>实施漏洞评估和分级管理</li>
                <li>建立漏洞修复和验证机制</li>
                <li>定期进行漏洞管理评估和优化</li>
              </ol>
              <h4 className="font-semibold text-lg mb-2">常见问题与建议</h4>
              <ul className="list-disc pl-6">
                <li>漏洞扫描要覆盖所有系统和应用</li>
                <li>建立漏洞修复的优先级机制</li>
                <li>定期进行漏洞管理培训</li>
                <li>保持漏洞管理工具的更新</li>
                <li>建立漏洞管理的考核机制</li>
              </ul>
            </div>
          </div>
        )}
      </div>
      {/* 底部导航 */}
      <div className="mt-8 flex justify-between">
        <Link 
          href="/study/security/ops/log"
          className="px-4 py-2 text-blue-600 hover:text-blue-800"
        >
          ← 返回日志分析
        </Link>
        <Link 
          href="/study/security/ops/patch"
          className="px-4 py-2 text-blue-600 hover:text-blue-800"
        >
          补丁管理 →
        </Link>
      </div>
    </div>
  );
} 